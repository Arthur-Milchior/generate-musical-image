class TestPenalty(unittest.TestCase):
    maxDiff = None
    empty = PenaltyForScale()

    def tearDown(self):
        # ensure empty was not modified
        self.assertEqual(self.empty, PenaltyForScale())
        super().tearDown()

    def setUp(self):
        super().setUp()
        # ensure empty was not modified
        self.assertEqual(self.empty, PenaltyForScale())

    def test_add_same_color_thumb_over(self):
        one_thumbover = self.empty.add_same_color_after_thumb(1, 2)
        expected_one = PenaltyForScale(nb_same_color_after_thumb_at_distance_diatonic={1: {2: 1}})
        two_thumbover = one_thumbover.add_same_color_after_thumb(1, 2)
        expected_two = PenaltyForScale(nb_same_color_after_thumb_at_distance_diatonic={1: {2: 2}})
        print(two_thumbover)
        print(expected_two)
        self.assertEqual(one_thumbover, expected_one)
        self.assertEqual(two_thumbover, expected_two)

    def test_add_transition_thumb_over(self):
        one_thumbover = self.empty.add_penalty_for_note_transition(PianoNote("C", 1), PianoNote("D", 2),
                                                                   for_right_hand=False)
        expected = PenaltyForScale(nb_same_color_after_thumb_at_distance_diatonic={1: {2: 1}})
        self.assertEqual(one_thumbover, expected)

    def test_from_scale(self):
        scale = [
            PianoNote("A", finger=5),
            PianoNote("G", finger=4),
            PianoNote("E", finger=3),
            PianoNote("D#", finger=2),
            PianoNote("D", finger=1),
            PianoNote("C", finger=3),
            PianoNote("A3", finger=1),
        ]
        penalty = PenaltyForScale.from_scale(scale, for_right_hand=True)
        print(penalty)
        self.assertEqual(penalty, PenaltyForScale(nb_same_color_after_thumb_at_distance_diatonic={1: {3: 1}},
                                                   three_four_interval_of_two=1))
