class ProgressionTest(unittest.TestCase):
    maxDiff = None
    d_min_7 = TwoHandsChord("ii",
                            left_hand=SetOfNotes([
                                Note("D3"),
                            ]),
                            right_hand=SetOfNotes([
                                Note("F4"),
                                Note("C5"),
                            ]),
                            tonic=Note("C")
                            )
    e_min_7 = TwoHandsChord("ii",
                            left_hand=SetOfNotes([
                                Note("E3"),
                            ]),
                            right_hand=SetOfNotes([
                                Note("G4"),
                                Note("D5"),
                            ]),
                            tonic=Note("D")
                            )
    three_five_c = ChordProgression(
        progression_name="ii V I", disambiguation="ii V I",
        key=Note("C"),
        chords=[
            d_min_7,
            TwoHandsChord("V",
                          left_hand=SetOfNotes([
                              Note("G3"),
                          ]),
                          right_hand=SetOfNotes([
                              Note("F4"),
                              Note("B4"),
                          ]),
                          tonic=Note("C")
                          ),
            TwoHandsChord("I",
                          left_hand=SetOfNotes([
                              Note("C3"),
                          ]),
                          right_hand=SetOfNotes([
                              Note("E4"),
                              Note("B4"),
                          ]),
                          tonic=Note("C")
                          ),
        ]
    )
    three_five_d = ChordProgression(
        progression_name="ii V I", disambiguation="ii V I",
        key=Note("D"),
        chords=[
            e_min_7,
            TwoHandsChord("V",
                          left_hand=SetOfNotes([
                              Note("A3"),
                          ]),
                          right_hand=SetOfNotes([
                              Note("G4"),
                              Note("C#5"),
                          ]),
                          tonic=Note("D")
                          ),
            TwoHandsChord("I",
                          left_hand=SetOfNotes([
                              Note("D3"),
                          ]),
                          right_hand=SetOfNotes([
                              Note("F#4"),
                              Note("C#5"),
                          ]),
                          tonic=Note("D")
                          ),
        ]
    )

    mini = """\
\\version "2.20.0"
<<
\\new Lyrics {\\lyricmode{ii}}
\\new Staff {c''}
>>
"""

    three_five_c_lily = """\
\\version "2.20.0"
\\score{
  <<
    \\new Lyrics {
      \\lyricmode{
        ii V I
      }
    }
    \\new PianoStaff<<
      \\new Staff{
        \\override Staff.TimeSignature.stencil = ##f
        \\omit Staff.BarLine
        \\omit PianoStaff.SpanBar
        \\time 30/4
        \\clef treble
        \\key c' \\major
        <f' c''> <f' b'> <e' b'>
      }
      \\new Staff{
        \\clef bass
        \\key c' \\major
        <d> <g> <c>
      }
    >>
  >>
}"""

    right_lily = """<f' c''> <f' b'> <e' b'>"""

    def test_right(self):
        self.assertEquals(self.right_lily, self.three_five_c.right_lily())

    def test_lyrics(self):
        self.assertEquals("ii V I", self.three_five_c.annotations_lily())

    def test_lily(self):
        self.assertEquals(
            self.three_five_c.lily(),
            self.three_five_c_lily
        )

    def test_file(self):
        prefix = f"{test_folder}/test"
        compile_(self.three_five_c_lily, prefix, wav=False, force_recompile=True)()

    def test_mini(self):
        prefix = f"{test_folder}/test"
        compile_(self.mini, prefix, wav=False, force_recompile=True)()

    def test_add(self):
        s = self.d_min_7 + Interval(chromatic=2, diatonic=1)
        self.assertEquals(s, self.e_min_7)
        s = self.three_five_c + Interval(chromatic=2, diatonic=1)
        print(s)
        print(self.three_five_d)
        self.assertEquals(s, self.three_five_d)
